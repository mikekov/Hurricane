<UserControl x:Class="Hurricane.AppMainWindow.WindowSkins.MiniPlayerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             xmlns:viewmodels="clr-namespace:Hurricane.ViewModels"
             xmlns:wpfsvl="clr-namespace:WPFSoundVisualizationLib;assembly=WPFSoundVisualizationLib"
             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:converter="clr-namespace:Hurricane.Extensions.Converter"
             xmlns:ex="clr-namespace:Hurricane.Extensions"
             xmlns:track="clr-namespace:Hurricane.Music.Track"
             xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
             DataContext="{x:Static viewmodels:MainViewModel.Instance}"
             MinWidth="300" MinHeight="200">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Styles/TimelineSlider.xaml" />
                <ResourceDictionary Source="/Resources/Styles/AdvancedTimelineSlider.xaml" />
                <ResourceDictionary Source="/Resources/Styles/MetroWindowStyle.xaml" />
                <ResourceDictionary Source="/Resources/Styles/FavoriteToggleButton.xaml" />
                <ResourceDictionary Source="/Resources/Styles/RoundButtons.xaml" />
                <ResourceDictionary Source="/Resources/Styles/VectorMenuItem.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converter:FormatTimespan x:Key="FormatTimespan" />
            <converter:CollapsedOnNullValue x:Key="CollapsedOnNullValue" />

            <Style x:Key="TextStyle" TargetType="TextBlock">
                <Setter Property="FontSize" Value="13" />
                <Setter Property="FontFamily" Value="Segoe UI" />
                <Setter Property="Foreground" Value="{DynamicResource ThemeTextBrush}" />
            </Style>

            <Style x:Key="TinyText" TargetType="TextBlock" BasedOn="{StaticResource TextStyle}">
                <Setter Property="FontSize" Value="9" />
                <Setter Property="FontWeight" Value="SemiBold" />
            </Style>

            <Style TargetType="{x:Type Button}" x:Key="CaptionButtonStyle">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                            <Border x:Name="Chrome" BorderBrush="{DynamicResource AccentColorBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" BorderThickness="0" Margin="0">
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Chrome" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource NormalColorBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource DarkColorBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Width" Value="24" />
                <Setter Property="Height" Value="24" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Foreground" Value="{DynamicResource ThemeIconBrush}" />
                <Setter Property="Margin" Value="0,0,0,0" />
                <Setter Property="Padding" Value="5" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource BlackBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Caption and its buttons -->
        <Grid VerticalAlignment="Top" Background="Transparent" MouseLeftButtonDown="Titlebar_MouseLeftButtonDown" MouseLeftButtonUp="Titlebar_MouseLeftButtonUp">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Button Grid.Column="0" Command="{Binding OpenSettings}" Style="{StaticResource CaptionButtonStyle}">
                <Path Stretch="UniformToFill" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Data="{StaticResource OptionsImage}" />
            </Button>
            <Button Grid.Column="2" VerticalAlignment="Center" Style="{StaticResource CaptionButtonStyle}" Click="CloseButton_Click">
                <Path Stretch="UniformToFill" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Data="{StaticResource CloseImage}" />
            </Button>
        </Grid>

        <!-- time, album cover, artist and title -->
        <Grid Grid.RowSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="75" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <StackPanel Orientation="Vertical" VerticalAlignment="Center" Margin="8,9,0,0">
                <TextBlock Style="{StaticResource TextStyle}" FontSize="28" FontFamily="Segoe UI Light" Text="{Binding MusicManager.CSCoreEngine.CurrentTrackPosition, Converter={StaticResource FormatTimespan}}" />
                <StackPanel Orientation="Horizontal" Margin="10,0,0,0">
                    <TextBlock Style="{StaticResource TextStyle}" Text="-" />
                    <TextBlock Style="{StaticResource TextStyle}" Text="{Binding MusicManager.CSCoreEngine.CurrentTrackTimeLeft, Converter={StaticResource FormatTimespan}}" />
                </StackPanel>
            </StackPanel>

            <ex:TrackImagePreseter Grid.Column="1" Track="{Binding MusicManager.CSCoreEngine.CurrentTrack}" Width="90" Height="90" Margin="0,2,0,0" ImageMargin="0,0,0,0" />

            <StackPanel Grid.Column="2" Orientation="Vertical" VerticalAlignment="Center" Margin="8,10,8,0">
                <TextBlock Style="{StaticResource TextStyle}" Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.Artist}" TextTrimming="CharacterEllipsis" />
                <TextBlock Style="{StaticResource TextStyle}" Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.Title}" TextTrimming="CharacterEllipsis" Margin="0,1" />
                <StackPanel Orientation="Horizontal" Margin="0,1,0,0">
                    <TextBlock Style="{StaticResource TinyText}" Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.Extension}" />
                    <TextBlock Style="{StaticResource TinyText}" Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.kbps}" Margin="6,0,0,0" />
                    <TextBlock Style="{StaticResource TinyText}" Text=" kbps" Margin="0" />
                </StackPanel>
            </StackPanel>
        </Grid>

        <!-- play/pause buttons and visualizer -->
        <Grid Grid.Row="2" Height="70">
            <ContentControl x:Name="AudioVisualisationContentControl" ex:AudioVisualisationExtensions.AudioVisualisationForSmartWindow="{Binding MySettings.Config.ApplicationDesign.AudioVisualisation.AudioVisualisationPlugin}">
                <ContentControl.Style>
                    <Style TargetType="ContentControl">
                        <Setter Property="Opacity" Value="0" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="True">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="1" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="0" BeginTime="0:0:1" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.ExitActions>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ContentControl.Style>
            </ContentControl>
            <!-- buttons -->
            <StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="5">
                <Button Style="{StaticResource RoundButton}" Height="40" Width="40" Background="White" Command="{Binding MusicManager.Commands.GoBackward}">
                    <Viewbox Width="18" Height="18" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="-1,0,1,0">
                        <Path Data="{StaticResource VectorFastBackward}" Stretch="UniformToFill" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" />
                    </Viewbox>
                </Button>
                <Button Style="{StaticResource RoundButton}" Height="55" Width="55" Command="{Binding MusicManager.Commands.TogglePlayPause}" Background="White" Margin="10,0,10,0">
                    <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Viewbox Width="22" Height="22" Stretch="Uniform" Margin="5,0,0,0">
                            <Path Data="{StaticResource VectorPlay}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" />
                            <Viewbox.Resources>
                                <Style TargetType="{x:Type Viewbox}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="True">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="Path">
                                    <Setter Property="Fill" Value="Black" />
                                </Style>
                            </Viewbox.Resources>
                        </Viewbox>
                        <Viewbox Width="24" Height="24" Stretch="Uniform">
                            <Path Data="{StaticResource VectorPause}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" />
                            <Viewbox.Resources>
                                <Style TargetType="{x:Type Viewbox}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="False">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="Path">
                                    <Setter Property="Fill" Value="Black" />
                                </Style>
                            </Viewbox.Resources>
                        </Viewbox>
                    </Grid>
                </Button>
                <Button Style="{StaticResource RoundButton}" Height="40" Width="40" Background="White" Command="{Binding MusicManager.Commands.GoForward}">
                    <Grid>
                        <Viewbox Width="18" Height="18" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="1,0,-1,0">
                            <Path Data="{StaticResource VectorFastForward}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}" />
                        </Viewbox>
                    </Grid>
                </Button>
            </StackPanel>
        </Grid>

        <!-- more buttons -->
        <Grid Grid.Row="3" x:Name="BaseControlGrid" Height="36" Margin="4,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>
            <Grid.Resources>
                <Style TargetType="Path" x:Key="TogglePath">
                    <Setter Property="Fill" Value="{StaticResource BlackBrush}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                            <Setter Property="Fill" Value="{StaticResource GrayBrush10}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="Path" x:Key="ButtonPath">
                    <Setter Property="Fill" Value="{StaticResource BlackBrush}" />
                </Style>
            </Grid.Resources>

            <Button Grid.Column="0" Style="{StaticResource RoundButton}" Width="24" Height="24" Focusable="False" Margin="0" x:Name="tbtn_open">
                <Viewbox Margin="7">
                    <Path Data="{StaticResource OpenImage}" Style="{StaticResource ButtonPath}" />
                </Viewbox>
            </Button>

            <DockPanel Grid.Column="1" Margin="20,0,20,0">
                <DockPanel.Resources>
                    <converter:VolumeToImage x:Key="VolumeToImage" />
                </DockPanel.Resources>
                <Viewbox Width="17" Height="17" Margin="0,0,4,0" OpacityMask="Aqua">
                    <Viewbox.InputBindings>
                        <MouseBinding MouseAction="LeftClick" Command="{Binding ToggleVolume}" />
                    </Viewbox.InputBindings>
                    <Path Data="{Binding ElementName=volumeslider,Path=Value,Converter={StaticResource VolumeToImage}}" Fill="{StaticResource ThemeIconBrush}" />
                </Viewbox>
                <Slider x:Name="volumeslider" Maximum="1" Minimum="0" IsMoveToPointEnabled="True" Style="{StaticResource AdvancedTimelineSlider}" VerticalAlignment="Center" LargeChange="0.1" Value="{Binding MusicManager.CSCoreEngine.Volume}" ex:SliderExtensions.MoveToPointOnDrag="True" />
            </DockPanel>

            <StackPanel Grid.Column="2" Orientation="Horizontal">
                <ToggleButton Style="{StaticResource RoundToggleButton}" Width="24" Height="24" Focusable="False" Margin="5,0,0,0" x:Name="tbtn_random" IsChecked="{Binding MusicManager.IsShuffleEnabled}">
                    <Viewbox Margin="5">
                        <Path Data="{StaticResource VectorRandom}" Style="{StaticResource TogglePath}" />
                    </Viewbox>
                </ToggleButton>
                <ToggleButton Style="{StaticResource RoundToggleButton}" Width="24" Height="24" Focusable="False" Margin="5,0,0,0" x:Name="tbtn_repeat" IsChecked="{Binding MusicManager.IsLoopEnabled}">
                    <Viewbox Stretch="UniformToFill" Margin="6">
                        <Path Data="{StaticResource VectorRepeat}" Style="{StaticResource TogglePath}" />
                    </Viewbox>
                </ToggleButton>
            </StackPanel>
        </Grid>

        <!-- playback position slider -->
        <Grid Grid.Row="4" Height="20" Margin="0,3,0,2">
            <Slider HorizontalAlignment="Stretch" IsMoveToPointEnabled="True" Maximum="{Binding MusicManager.CSCoreEngine.TrackLength}" Value="{Binding MusicManager.CSCoreEngine.Position}" ex:SliderExtensions.MoveToPointOnDrag="True">
                <Slider.Style>
                    <Style TargetType="Slider" BasedOn="{StaticResource AdvancedTimelineSlider}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsLoading}" Value="True">
                                <Setter Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Slider.Style>
            </Slider>

            <controls:MetroProgressBar IsIndeterminate="{Binding MusicManager.CSCoreEngine.IsLoading}" Foreground="{StaticResource AccentColorBrush}">
                <controls:MetroProgressBar.Style>
                    <Style TargetType="controls:MetroProgressBar">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsLoading}" Value="False">
                                <Setter Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </controls:MetroProgressBar.Style>
            </controls:MetroProgressBar>
        </Grid>

        <!-- list of tracks -->
        <Grid Grid.Row="5">
            <ListView ItemsSource="{Binding MusicManager.SelectedPlaylist.ViewSource}" SelectionMode="Extended" Grid.Row="1" Drop="listview_Drop" DragEnter="listview_DragEnter" x:Name="TracksListView" SelectedItem="{Binding MusicManager.SelectedTrack}" ScrollViewer.VerticalScrollBarVisibility="Visible" Margin="0,5,-1,0" HorizontalContentAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" SelectionChanged="listview_SelectionChanged" IsSynchronizedWithCurrentItem="True" Style="{StaticResource VisualizingListView}" Background="{StaticResource WhiteBrush}" BorderThickness="0" AllowDrop="True">

                <ListView.InputBindings>
                    <KeyBinding Key="Delete" Command="{Binding RemoveSelectedTracks}" CommandParameter="{Binding ElementName=TracksListView,Path=SelectedItems}" />
                    <KeyBinding Key="Enter" Command="{Binding MusicManager.Commands.PlaySelectedTrack}" />
                    <KeyBinding Key="O" Modifiers="Alt" Command="{Binding MusicManager.Commands.OpenTrackLocation}" />
                    <KeyBinding Key="Space" Command="{Binding MusicManager.Commands.TogglePlayPause}" />
                    <KeyBinding Key="Q" Command="{Binding MusicManager.Commands.AddTracksToQueue}" CommandParameter="{Binding ElementName=TracksListView,Path=SelectedItems}" />
                    <KeyBinding Key="Q" Modifiers="Alt" Command="{Binding MusicManager.Commands.RemoveFromQueue}" />
                    <KeyBinding Key="Q" Modifiers="Control" Command="{Binding OpenQueueManager}" />
                    <KeyBinding Key="Insert" Command="{Binding AddFilesToPlaylist}" />
                    <KeyBinding Key="Insert" Modifiers="Control" Command="{Binding AddFolderToPlaylist}" />
                    <KeyBinding Key="F4" Command="{Binding OpenTrackInformation}" />
                    <KeyBinding Key="F3" Command="{Binding OpenTagEditor}" />
                </ListView.InputBindings>
                <ListView.Resources>
                    <converter:TrueFalseValueConverter x:Key="boldifplaying" FalseValue="Normal" TrueValue="Bold" />
                    <ContextMenu x:Key="FileContextMenu" DataContext="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext}">
                        <MenuItem Header="{DynamicResource Play}" Command="{Binding MusicManager.Commands.PlaySelectedTrack}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="Enter" />
                        <Separator />
                        <MenuItem Header="{DynamicResource AddTracks}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                            <MenuItem Header="{DynamicResource AddFiles}" Command="{Binding AddFilesToPlaylist}" InputGestureText="{DynamicResource Ins}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform" Height="16" Width="16">
                                        <Path Fill="{StaticResource BlackBrush}" Data="{StaticResource VectorAddFile}" />
                                    </Viewbox>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="{DynamicResource AddDirectories}" Command="{Binding AddFolderToPlaylist}" InputGestureText="{DynamicResource CtrlIns}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform" Height="16" Width="16">
                                        <Path Fill="{StaticResource BlackBrush}" Data="{StaticResource VectorAddFolder}" />
                                    </Viewbox>
                                </MenuItem.Icon>
                            </MenuItem>
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="{DynamicResource Queue}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}">
                            <MenuItem Header="{DynamicResource AddToQueue}" Command="{Binding MusicManager.Commands.AddTracksToQueue}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ListView},Path=SelectedItems}" InputGestureText="Q" />
                            <MenuItem Header="{DynamicResource RemoveFromQueue}" Command="{Binding MusicManager.Commands.RemoveFromQueue}" InputGestureText="Alt+Q" />
                            <MenuItem Header="{DynamicResource ClearQueue}" Command="{Binding MusicManager.Commands.ClearQueue}" IsEnabled="{Binding MusicManager.Queue.HasTracks}" />
                            <Separator />
                            <MenuItem Header="{DynamicResource QueueManager}" Command="{Binding OpenQueueManager}" InputGestureText="{DynamicResource CtrlQ}" />
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="{DynamicResource TrackInformation}" Command="{Binding OpenTrackInformation}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="F4" />
                        <MenuItem Header="{DynamicResource TagEditor}" Command="{Binding OpenTagEditor}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="F3" />
                        <MenuItem Header="{DynamicResource FileLocation}" Command="{Binding MusicManager.Commands.OpenTrackLocation}" InputGestureText="Alt+O" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" />
                        <Separator />
                        <MenuItem Header="{DynamicResource Remove}" Command="{Binding RemoveSelectedTracks}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=SelectedItems}" InputGestureText="{DynamicResource Del}" />
                    </ContextMenu>
                    <ContextMenu x:Key="StreamContextMenu">
                        <MenuItem Header="{DynamicResource Play}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Commands.PlaySelectedTrack}" InputGestureText="Enter" />
                        <Separator />
                        <MenuItem Header="{DynamicResource AddTracks}" IsEnabled="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.SelectedPlaylist.CanEdit}">
                            <MenuItem Header="{DynamicResource AddFiles}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.AddFilesToPlaylist}" InputGestureText="{DynamicResource Ins}" />
                            <MenuItem Header="{DynamicResource AddDirectories}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.AddFolderToPlaylist}" InputGestureText="{DynamicResource CtrlIns}" />
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="{DynamicResource Queue}">
                            <MenuItem Header="{DynamicResource AddToQueue}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Commands.AddTracksToQueue}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}},Path=SelectedItems}" InputGestureText="Q" />
                            <MenuItem Header="{DynamicResource RemoveFromQueue}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Commands.RemoveFromQueue}" InputGestureText="Alt+Q" />
                            <MenuItem Header="{DynamicResource ClearQueue}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Commands.ClearQueue}" IsEnabled="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Queue.HasTracks}" />
                            <Separator />
                            <MenuItem Header="{DynamicResource QueueManager}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.OpenQueueManager}" InputGestureText="{DynamicResource CtrlQ}" />
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="{DynamicResource TrackInformation}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.OpenTrackInformation}" InputGestureText="F4" />
                        <MenuItem Header="{DynamicResource OpenUrl}" Command="{Binding OpenLinkCommand}" InputGestureText="Alt+O" />
                        <Separator />
                        <MenuItem Header="{DynamicResource Remove}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.RemoveSelectedTracks}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=SelectedItems}" InputGestureText="{DynamicResource Del}" />
                    </ContextMenu>
                    <Style x:Key="listItemFocusVisualStyle">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Border SnapsToDevicePixels="true" BorderThickness="1" BorderBrush="{DynamicResource HighlightBrush}" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListView.Resources>

                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem" BasedOn="{StaticResource MetroListViewItem}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource listItemFocusVisualStyle}" />
                        <Setter Property="Padding" Value="0,0" />
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="MinHeight" Value="10" />
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <Setter Property="Border.BorderThickness" Value="0,0,0,0" />
                        <Setter Property="Border.BorderBrush" Value="LightGray" />
                        <Setter Property="LayoutTransform">
                            <Setter.Value>
                                <ScaleTransform x:Name="transform" />
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding TrackType}" Value="File">
                                <Setter Property="ContextMenu" Value="{StaticResource FileContextMenu}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding TrackType}" Value="Stream">
                                <Setter Property="ContextMenu" Value="{StaticResource StreamContextMenu}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding TrackExists}" Value="False">
                                <Setter Property="Background" Value="{StaticResource GrayBrush8}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsRemoving}" Value="True">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ThicknessAnimation To="-40,0,40,0" Duration="0:0:0.5" Storyboard.TargetProperty="Margin" />
                                            <DoubleAnimation To="0" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAdded}" Value="True">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ThicknessAnimation From="-40,0,40,0" To="0" Duration="0:0:0.5" Storyboard.TargetProperty="Margin" FillBehavior="Stop" />
                                            <DoubleAnimation From="0" To="1" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity" FillBehavior="Stop" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>

                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Grid Background="#00FFFFFF" Margin="8,0" Height="20">
                            <Grid.InputBindings>
                                <MouseBinding Gesture="LeftDoubleClick" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.MusicManager.Commands.PlaySelectedTrack}" />
                            </Grid.InputBindings>
                            <Grid.Resources>
                                <converter:TrueFalseValueConverter TrueValue="2" FalseValue="0" x:Key="TrueFalseValueConverter" />
                            </Grid.Resources>
                            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition Width="auto" />
                                    </Grid.ColumnDefinitions>
                                    <StackPanel Visibility="{Binding QueueID,Converter={StaticResource CollapsedOnNullValue}}" Orientation="Horizontal" Grid.Column="1">
                                        <TextBlock Text="[" Style="{StaticResource TextStyle}" />
                                        <TextBlock Text="{Binding QueueID}" Style="{StaticResource TextStyle}" />
                                        <TextBlock Text="]" Style="{StaticResource TextStyle}" />
                                    </StackPanel>
                                    <TextBlock Text="{Binding Title}" Style="{StaticResource TextStyle}" TextTrimming="CharacterEllipsis" Grid.Column="1" />
                                    <Polygon Points="0,0 8,5 0,10" Grid.Column="2" Fill="{StaticResource AccentColorBrush}" Visibility="{Binding IsOpened, Converter={StaticResource BooleanToVisibilityConverter}}" VerticalAlignment="Center" Margin="4,0" Width="8" />
                                    <TextBlock Text="{Binding Duration}" Style="{StaticResource TextStyle}" TextAlignment="Right" x:Name="txt2" Grid.Column="3" />
                                </Grid>
                            </StackPanel>
                        </Grid>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </Grid>

    </Grid>
</UserControl>
